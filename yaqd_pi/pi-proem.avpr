{
    "config": {
        "enable": {
            "default": true,
            "doc": "Disable this daemon. The kind entry-point will not attempt to start this daemon.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "log_level": {
            "default": "info",
            "doc": "Set daemon log-level.",
            "origin": "is-daemon",
            "type": {
                "name": "level",
                "symbols": [
                    "debug",
                    "info",
                    "notice",
                    "warning",
                    "error",
                    "critical",
                    "alert",
                    "emergency"
                ],
                "type": "enum"
            }
        },
        "log_to_file": {
            "default": false,
            "doc": "Optionally force logging to a file.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "loop_at_startup": {
            "default": false,
            "doc": "If set to true, the daemon will begin to loop measure as soon as it starts.",
            "origin": "has-measure-trigger",
            "type": "boolean"
        },
        "make": {
            "default": "princeton_instruments",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "model": {
            "default": "proEM-HS:512BX3",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "origin": "is-daemon",
            "type": "int"
        },
        "sensor_temperature_setpoint": {
            "default": -70.0,
            "doc": "Set the sensor temperature in deg C. \\\n        Be careful if setting to anything but -70.0 C \\\n        Do not set below -80.0 C",
            "type": "float"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        }
    },
    "doc": "",
    "installation": {
        "PyPI": "https://pypi.org/project/yaqd-pi"
    },
    "links": {
        "bugtracker": "https://gitlab.com/yaq/yaqd-pi/-/issues",
        "source": "https://gitlab.com/yaq/yaqd-pi"
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "origin": "is-daemon",
            "request": [],
            "response": "boolean"
        },
        "get_adc_analog_gain": {
            "request": [],
            "response": "string"
        },
        "get_channel_mappings": {
            "doc": "Defines which mapping keys apply to which channel keys. Each channel may have zero or many mappings. Mappings must broadcast into corresponding channels.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "string",
                    "type": "array"
                }
            }
        },
        "get_channel_names": {
            "doc": "Get current channel names.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "items": "string",
                "type": "array"
            }
        },
        "get_channel_shapes": {
            "doc": "Get current channel shapes. If list is empty, channel is scalar.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "int",
                    "type": "array"
                }
            }
        },
        "get_channel_units": {
            "doc": "Get current channel units.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_em_gain": {
            "request": [],
            "response": "int"
        },
        "get_exposure_time": {
            "request": [],
            "response": "float"
        },
        "get_mapping_id": {
            "doc": "Mapping ID. This integer increments every time the mapping is updated. Clients can safely check this id to verify that their cached mappings are correct, if desired.",
            "origin": "has-mapping",
            "request": [],
            "response": "int"
        },
        "get_mapping_units": {
            "doc": "Must return units for every mapping. Units can be null.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_mappings": {
            "doc": "Mappings themselves.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "ndarray",
                    "double"
                ]
            }
        },
        "get_measured": {
            "doc": "Returns map of channel_name to measured_value. Always returns additional key measurement_id.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "int",
                    "double",
                    "ndarray"
                ]
            }
        },
        "get_measurement_id": {
            "doc": "Get current measurement_id. Clients are encouraged to watch for this to be updated before calling get_measured to get entire measurement.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "int"
            }
        },
        "get_readout_count": {
            "request": [],
            "response": "int"
        },
        "get_roi": {
            "request": [],
            "response": "proem_roi"
        },
        "get_sensor_temperature": {
            "request": [],
            "response": "float"
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "origin": "is-daemon",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "measure": {
            "doc": "Initiate a measurement. Returns integer, measurement ID.",
            "origin": "has-measure-trigger",
            "request": [
                {
                    "default": false,
                    "name": "loop",
                    "type": "boolean"
                }
            ],
            "response": "int"
        },
        "set_adc_analog_gain": {
            "request": [
                {
                    "name": "gain",
                    "type": "string"
                }
            ],
            "response": "null"
        },
        "set_em_gain": {
            "request": [
                {
                    "name": "em_gain",
                    "type": "int"
                }
            ],
            "response": "null"
        },
        "set_exposure_time": {
            "request": [
                {
                    "name": "exposure_time",
                    "type": "float"
                }
            ],
            "response": "null"
        },
        "set_readout_count": {
            "request": [
                {
                    "name": "readout_count",
                    "type": "int"
                }
            ],
            "response": "null"
        },
        "set_roi": {
            "request": [
                {
                    "name": "roi",
                    "type": "proem_roi"
                }
            ],
            "response": "null"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "origin": "is-daemon",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        },
        "stop_looping": {
            "doc": "Stop looping measurement.",
            "origin": "has-measure-trigger",
            "request": [],
            "response": "null"
        }
    },
    "protocol": "pi-proem",
    "requires": [],
    "state": {
        "adc_analog_gain": {
            "default": "Low",
            "type": "string"
        },
        "em_gain": {
            "default": 1,
            "type": "int"
        },
        "exposure_time": {
            "default": 33.0,
            "doc": "Camera sensor exposure time (in milliseconds).",
            "type": "float"
        },
        "readout_count": {
            "default": 1,
            "doc": "Number of frames to grab in the acquisition.",
            "type": "int"
        },
        "roi": {
            "default": {},
            "doc": "The ROI.",
            "type": "proem_roi"
        }
    },
    "traits": [
        "has-mapping",
        "has-measure-trigger",
        "is-daemon",
        "is-sensor"
    ],
    "types": [
        {
            "fields": [
                {
                    "default": 1,
                    "name": "x_binning",
                    "type": "int"
                },
                {
                    "default": 1,
                    "name": "y_binning",
                    "type": "int"
                },
                {
                    "default": 0,
                    "name": "left",
                    "type": "int"
                },
                {
                    "default": 512,
                    "name": "width",
                    "type": "int"
                },
                {
                    "default": 0,
                    "name": "top",
                    "type": "int"
                },
                {
                    "default": 512,
                    "name": "height",
                    "type": "int"
                }
            ],
            "name": "proem_roi",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "shape",
                    "type": {
                        "items": "int",
                        "type": "array"
                    }
                },
                {
                    "name": "typestr",
                    "type": "string"
                },
                {
                    "name": "data",
                    "type": "bytes"
                },
                {
                    "name": "version",
                    "type": "int"
                }
            ],
            "logicalType": "ndarray",
            "name": "ndarray",
            "type": "record"
        }
    ]
}