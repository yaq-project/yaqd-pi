{
    "config": {
        "enable": {
            "default": true,
            "doc": "Disable this daemon. The kind entry-point will not attempt to start this daemon.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "grating_aoi": {
            "default": 5,
            "doc": "Angle of incident beam on grating face in deg. \\\n         Default is 5.",
            "type": "float"
        },
        "log_level": {
            "default": "info",
            "doc": "Set daemon log-level.",
            "origin": "is-daemon",
            "type": {
                "name": "level",
                "symbols": [
                    "debug",
                    "info",
                    "notice",
                    "warning",
                    "error",
                    "critical",
                    "alert",
                    "emergency"
                ],
                "type": "enum"
            }
        },
        "log_to_file": {
            "default": false,
            "doc": "Optionally force logging to a file.",
            "origin": "is-daemon",
            "type": "boolean"
        },
        "loop_at_startup": {
            "default": false,
            "doc": "If set to true, the daemon will begin to loop measure as soon as it starts.",
            "origin": "has-measure-trigger",
            "type": "boolean"
        },
        "make": {
            "default": "princeton_instruments",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "model": {
            "default": "proEM-HS:512BX3",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "port": {
            "doc": "TCP port for daemon to occupy.",
            "origin": "is-daemon",
            "type": "int"
        },
        "sensor_temperature_setpoint": {
            "default": -70.0,
            "doc": "Set the sensor temperature in deg C. \\\n        Be careful if setting to anything but -70.0 C \\\n        Do not set below -80.0 C",
            "type": "float"
        },
        "serial": {
            "default": null,
            "doc": "Serial number for the particular device represented by the daemon",
            "origin": "is-daemon",
            "type": [
                "null",
                "string"
            ]
        },
        "spectral_range": {
            "default": [
                0.36,
                0.841
            ],
            "doc": "The desired range of wavelengths that is displayed on the spectral \\\n         axis of the detector. Units of microns. First item in the list is \\\n        the bluest color, second item is the reddest e.g. [0.360, 0.841]",
            "items": "float",
            "type": "array"
        }
    },
    "doc": "",
    "installation": {
        "PyPI": "https://pypi.org/project/yaqd-pi"
    },
    "links": {
        "bugtracker": "https://github.com/yaq-project/yaqd-pi/issues",
        "source": "https://github.com/yaq-project/yaqd-pi"
    },
    "messages": {
        "busy": {
            "doc": "Returns true if daemon is currently busy.",
            "origin": "is-daemon",
            "request": [],
            "response": "boolean"
        },
        "get_adc_quality": {
            "request": [],
            "response": "string"
        },
        "get_adc_quality_types": {
            "request": [],
            "response": {
                "items": "string",
                "type": "array"
            }
        },
        "get_adc_speed": {
            "request": [],
            "response": "float"
        },
        "get_adc_speed_units": {
            "request": [],
            "response": "string"
        },
        "get_analog_gain": {
            "request": [],
            "response": "string"
        },
        "get_analog_gain_types": {
            "request": [],
            "response": [
                {
                    "items": "string",
                    "type": "array"
                }
            ]
        },
        "get_channel_mappings": {
            "doc": "Defines which mapping keys apply to which channel keys. Each channel may have zero or many mappings. Mappings must broadcast into corresponding channels.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "string",
                    "type": "array"
                }
            }
        },
        "get_channel_names": {
            "doc": "Get current channel names.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "items": "string",
                "type": "array"
            }
        },
        "get_channel_shapes": {
            "doc": "Get current channel shapes. If list is empty, channel is scalar.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": {
                    "items": "int",
                    "type": "array"
                }
            }
        },
        "get_channel_units": {
            "doc": "Get current channel units.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_config": {
            "doc": "Full configuration for the individual daemon as defined in the TOML file.\nThis includes defaults and shared settings not directly specified in the daemon-specific TOML table.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_config_filepath": {
            "doc": "String representing the absolute filepath of the configuration file on the host machine.\n",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "get_em_gain": {
            "request": [],
            "response": "int"
        },
        "get_em_gain_limits": {
            "request": [],
            "response": {
                "items": "int",
                "type": "array"
            }
        },
        "get_exposure_time": {
            "request": [],
            "response": "float"
        },
        "get_exposure_time_units": {
            "request": [],
            "response": "string"
        },
        "get_mapping_id": {
            "doc": "Mapping ID. This integer increments every time the mapping is updated. Clients can safely check this id to verify that their cached mappings are correct, if desired.",
            "origin": "has-mapping",
            "request": [],
            "response": "int"
        },
        "get_mapping_units": {
            "doc": "Must return units for every mapping. Units can be null.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "get_mappings": {
            "doc": "Mappings themselves.",
            "origin": "has-mapping",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "ndarray",
                    "double"
                ]
            }
        },
        "get_measured": {
            "doc": "Returns map of channel_name to measured_value. Always returns additional key measurement_id.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "int",
                    "double",
                    "ndarray"
                ]
            }
        },
        "get_measurement_id": {
            "doc": "Get current measurement_id. Clients are encouraged to watch for this to be updated before calling get_measured to get entire measurement.",
            "origin": "is-sensor",
            "request": [],
            "response": {
                "type": "int"
            }
        },
        "get_readout_count": {
            "request": [],
            "response": "int"
        },
        "get_roi": {
            "request": [],
            "response": "proem_roi"
        },
        "get_sensor_temperature": {
            "request": [],
            "response": "float"
        },
        "get_state": {
            "doc": "Get version of the running daemon",
            "origin": "is-daemon",
            "request": [],
            "response": "string"
        },
        "id": {
            "doc": "JSON object with information to identify the daemon, including name, kind, make, model, serial.\n",
            "origin": "is-daemon",
            "request": [],
            "response": {
                "type": "map",
                "values": [
                    "null",
                    "string"
                ]
            }
        },
        "measure": {
            "doc": "Initiate a measurement. Returns integer, measurement ID.",
            "origin": "has-measure-trigger",
            "request": [
                {
                    "default": false,
                    "name": "loop",
                    "type": "boolean"
                }
            ],
            "response": "int"
        },
        "set_adc_quality": {
            "request": [
                {
                    "name": "quality",
                    "type": "string"
                }
            ],
            "response": "null"
        },
        "set_adc_speed": {
            "request": [
                {
                    "name": "speed",
                    "type": "float"
                }
            ],
            "response": "null"
        },
        "set_analog_gain": {
            "request": [
                {
                    "name": "gain",
                    "type": "string"
                }
            ],
            "response": "null"
        },
        "set_em_gain": {
            "request": [
                {
                    "name": "em_gain",
                    "type": "int"
                }
            ],
            "response": "null"
        },
        "set_exposure_time": {
            "request": [
                {
                    "name": "exposure_time",
                    "type": "float"
                }
            ],
            "response": "null"
        },
        "set_readout_count": {
            "request": [
                {
                    "name": "readout_count",
                    "type": "int"
                }
            ],
            "response": "null"
        },
        "set_roi": {
            "request": [
                {
                    "name": "roi",
                    "type": "proem_roi"
                }
            ],
            "response": "null"
        },
        "shutdown": {
            "doc": "Cleanly shutdown (or restart) daemon.",
            "origin": "is-daemon",
            "request": [
                {
                    "default": false,
                    "name": "restart",
                    "type": "boolean"
                }
            ],
            "response": "null"
        },
        "stop_looping": {
            "doc": "Stop looping measurement.",
            "origin": "has-measure-trigger",
            "request": [],
            "response": "null"
        }
    },
    "properties": {
        "adc_quality": {
            "control_kind": "normal",
            "dynamic": true,
            "getter": "get_adc_quality",
            "limits_getter": null,
            "options_getter": "get_adc_quality_types",
            "record_kind": "metadata",
            "setter": "set_adc_quality",
            "type": "string",
            "units_getter": null
        },
        "adc_speed": {
            "control_kind": "normal",
            "dynamic": true,
            "getter": "get_adc_speed",
            "limits_getter": null,
            "options_getter": null,
            "record_kind": "metadata",
            "setter": "set_adc_speed",
            "type": "float",
            "units_getter": "get_adc_speed_units"
        },
        "analog_gain": {
            "control_kind": "normal",
            "dynamic": true,
            "getter": "get_analog_gain",
            "limits_getter": null,
            "options_getter": "get_analog_gain_types",
            "record_kind": "metadata",
            "setter": "set_analog_gain",
            "type": "string",
            "units_getter": null
        },
        "em_gain": {
            "control_kind": "normal",
            "dynamic": true,
            "getter": "get_em_gain",
            "limits_getter": "get_em_gain_limits",
            "options_getter": null,
            "record_kind": "metadata",
            "setter": "set_em_gain",
            "type": "int",
            "units_getter": null
        },
        "exposure_time": {
            "control_kind": "hinted",
            "dynamic": true,
            "getter": "get_exposure_time",
            "limits_getter": null,
            "options_getter": null,
            "record_kind": "metadata",
            "setter": "set_exposure_time",
            "type": "float",
            "units_getter": "get_exposure_time_units"
        },
        "readout_count": {
            "control_kind": "hinted",
            "dynamic": true,
            "getter": "get_readout_count",
            "limits_getter": null,
            "options_getter": null,
            "record_kind": "metadata",
            "setter": "set_readout_count",
            "type": "int",
            "units_getter": null
        },
        "temperature": {
            "control_kind": "normal",
            "dynamic": true,
            "getter": "get_sensor_temperature",
            "limits_getter": null,
            "options_getter": null,
            "record_kind": "metadata",
            "setter": null,
            "type": "float",
            "units_getter": null
        }
    },
    "protocol": "pi-proem",
    "requires": [],
    "state": {},
    "traits": [
        "has-mapping",
        "has-measure-trigger",
        "is-daemon",
        "is-sensor"
    ],
    "types": [
        {
            "fields": [
                {
                    "default": 1,
                    "name": "x_binning",
                    "type": "int"
                },
                {
                    "default": 1,
                    "name": "y_binning",
                    "type": "int"
                },
                {
                    "default": 0,
                    "name": "left",
                    "type": "int"
                },
                {
                    "default": 512,
                    "name": "width",
                    "type": "int"
                },
                {
                    "default": 0,
                    "name": "bottom",
                    "type": "int"
                },
                {
                    "default": 512,
                    "name": "height",
                    "type": "int"
                }
            ],
            "name": "proem_roi",
            "type": "record"
        },
        {
            "fields": [
                {
                    "name": "shape",
                    "type": {
                        "items": "int",
                        "type": "array"
                    }
                },
                {
                    "name": "typestr",
                    "type": "string"
                },
                {
                    "name": "data",
                    "type": "bytes"
                },
                {
                    "name": "version",
                    "type": "int"
                }
            ],
            "logicalType": "ndarray",
            "name": "ndarray",
            "type": "record"
        }
    ]
}